// <auto-generated />
using InterviewProject.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewProject.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InterviewProject.Domain.Entities.Border", b =>
                {
                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NeighbourId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryId", "NeighbourId");

                    b.HasIndex("NeighbourId");

                    b.ToTable("Borders");

                    b.HasData(
                        new
                        {
                            CountryId = "CAN",
                            NeighbourId = "USA"
                        },
                        new
                        {
                            CountryId = "USA",
                            NeighbourId = "CAN"
                        },
                        new
                        {
                            CountryId = "USA",
                            NeighbourId = "MEX"
                        },
                        new
                        {
                            CountryId = "MEX",
                            NeighbourId = "BLZ"
                        },
                        new
                        {
                            CountryId = "MEX",
                            NeighbourId = "GTM"
                        },
                        new
                        {
                            CountryId = "MEX",
                            NeighbourId = "USA"
                        },
                        new
                        {
                            CountryId = "BLZ",
                            NeighbourId = "GTM"
                        },
                        new
                        {
                            CountryId = "BLZ",
                            NeighbourId = "MEX"
                        },
                        new
                        {
                            CountryId = "GTM",
                            NeighbourId = "MEX"
                        },
                        new
                        {
                            CountryId = "GTM",
                            NeighbourId = "BLZ"
                        },
                        new
                        {
                            CountryId = "GTM",
                            NeighbourId = "SLV"
                        },
                        new
                        {
                            CountryId = "GTM",
                            NeighbourId = "HND"
                        },
                        new
                        {
                            CountryId = "SLV",
                            NeighbourId = "GTM"
                        },
                        new
                        {
                            CountryId = "SLV",
                            NeighbourId = "HND"
                        },
                        new
                        {
                            CountryId = "HND",
                            NeighbourId = "NIC"
                        },
                        new
                        {
                            CountryId = "HND",
                            NeighbourId = "SLV"
                        },
                        new
                        {
                            CountryId = "HND",
                            NeighbourId = "GTM"
                        },
                        new
                        {
                            CountryId = "NIC",
                            NeighbourId = "SLV"
                        },
                        new
                        {
                            CountryId = "NIC",
                            NeighbourId = "CRI"
                        },
                        new
                        {
                            CountryId = "CRI",
                            NeighbourId = "NIC"
                        },
                        new
                        {
                            CountryId = "CRI",
                            NeighbourId = "PAN"
                        },
                        new
                        {
                            CountryId = "PAN",
                            NeighbourId = "CRI"
                        });
                });

            modelBuilder.Entity("InterviewProject.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Code = "CAN",
                            Name = "Canada"
                        },
                        new
                        {
                            Code = "USA",
                            Name = "United States"
                        },
                        new
                        {
                            Code = "MEX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Code = "BLZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Code = "GTM",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Code = "SLV",
                            Name = "El Salvador"
                        },
                        new
                        {
                            Code = "HND",
                            Name = "Honduras"
                        },
                        new
                        {
                            Code = "NIC",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Code = "CRI",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Code = "PAN",
                            Name = "Panama"
                        });
                });

            modelBuilder.Entity("InterviewProject.Domain.Entities.Border", b =>
                {
                    b.HasOne("InterviewProject.Domain.Entities.Country", "Country")
                        .WithMany("Borders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InterviewProject.Domain.Entities.Country", "Neighbour")
                        .WithMany()
                        .HasForeignKey("NeighbourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Neighbour");
                });

            modelBuilder.Entity("InterviewProject.Domain.Entities.Country", b =>
                {
                    b.Navigation("Borders");
                });
#pragma warning restore 612, 618
        }
    }
}
